"use client";
import React from 'react';
import { VapiComponent,  TranscriptEntry } from 'vapi-web';

type FunctionArgs = {
  status?: string;
  timestamp?: string;
  [key: string]: any;
};

const Home: React.FC = () => {
  const handleEvents = {
    'call-start': () => console.log('Call started'),
    'call-end': () => console.log('Call ended'),
    'speech-start': () => console.log('Speech started'),
    'speech-end': () => console.log('Speech ended'),
    'volume-level': (volume: number) => console.log(`Volume level: ${volume}`),
    'message': (message: any) => console.log('Message received:', message),
    'error': (error: Error) => console.error('Error:', error),
  };

  const handleTranscriptUpdate = (transcripts: TranscriptEntry[]) => {
    console.log('Transcript updated:', transcripts);
  };

  const handleFunctionCall = (functionName: string, functionArgs: FunctionArgs) => {
    const functionHandlers: { [key: string]: (args: FunctionArgs) => void } = {
      tellAJoke: (args) => {
        if (args.status) {
          console.log(`Telling a joke: ${args.status}`);
        }
      },
      highlightTranscript: (args) => {
        if (args.timestamp) {
          console.log(`Highlighting transcript entry at timestamp: ${args.timestamp}`);
        }
      },
      // Add more functions as needed
    };

    const handler = functionHandlers[functionName];
    if (handler) {
      handler(functionArgs);
    } else {
      console.warn(`Unhandled function call: ${functionName}`, functionArgs);
    }
  };

  const assistantConfig = {
    transcriber: {
      provider: "deepgram",
      model: "nova-2",
      language: "en-US"
    },
    model: {
      provider: "openai",
      model: "gpt-3.5-turbo",
      messages: [
        {
          role: "system",
          content: "You are a helpful assistant with advanced capabilities."
        }
      ],
      functions: [
        {
          name: "tellAJoke",
          description: "Defers making up jokes to this function.",
          parameters: {
            type: "object",
            properties: {
              status: {
                type: "string",
                description: "A new joke generated by this function."
              }
            }
          }
        },
        {
          name: "highlightTranscript",
          description: "Highlights a specific transcript entry.",
          parameters: {
            type: "object",
            properties: {
              timestamp: {
                type: "string",
                description: "The timestamp of the transcript to highlight."
              }
            }
          }
        }
      ]
    },
    voice: {
      provider: "playht",
      voiceId: "jennifer"
    },
    name: "Advanced Assistant with Functions"
  };

  const customStyles = {
    container: { padding: '20px', border: '1px solid #ccc', borderRadius: '8px', maxWidth: '600px', margin: '0 auto' },
    buttonContainer: { marginBottom: '10px', display: 'flex', gap: '10px' },
    startButton: { backgroundColor: '#4CAF50', color: 'white', padding: '10px', border: 'none', borderRadius: '4px', cursor: 'pointer' },
    stopButton: { backgroundColor: '#f44336', color: 'white', padding: '10px', border: 'none', borderRadius: '4px', cursor: 'pointer' },
    muteButton: { backgroundColor: '#008CBA', color: 'white', padding: '10px', border: 'none', borderRadius: '4px', cursor: 'pointer' },
    statusContainer: { marginTop: '10px' },
    transcriptContainer: { marginTop: '10px', whiteSpace: 'pre-wrap', backgroundColor: '#f1f1f1', padding: '10px', borderRadius: '4px' },
  };

  return (
    <div className='p-12'>
      <h1>Drop-in solution</h1>
      <hr/>
      <VapiComponent
        publicKey={process.env.NEXT_PUBLIC_VAPI_PUBLIC_KEY || ""}
        assistantId={process.env.NEXT_PUBLIC_VAPI_ASSISTANT_ID || ""}
      />
      <hr/>
      <br />
      <h1>Advanced Vapi Voice Assistant with AutoStart and Functions</h1>
      <br />
      <VapiComponent
        publicKey={process.env.NEXT_PUBLIC_VAPI_PUBLIC_KEY || ""}
        assistantConfig={assistantConfig}
        onEvents={handleEvents}
        startButtonLabel="Initiate Call"
        stopButtonLabel="End Call"
        muteButtonLabel="Mute Audio"
        unmuteButtonLabel="Unmute Audio"
        callStatusLabel="Current Call Status"
        transcriptLabel="Live Transcript"
        onStart={() => console.log('Call started')}
        onStop={() => console.log('Call stopped')}
        onMuteToggle={(isMuted: boolean) => console.log(`Mute toggled: ${isMuted}`)} // Add type annotation here
        onTranscriptUpdate={handleTranscriptUpdate}
        onFunctionCall={handleFunctionCall}
        autoStart={false}
        logActionMessage='The user has pressed the button, get their attention back nicely.'
        styles={customStyles}
      />
    </div>
  );
};

export default Home;